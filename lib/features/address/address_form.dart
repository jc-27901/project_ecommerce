// Here's how to update the AddressFormScreen to use the AddressProvider:

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:provider/provider.dart';

import '../../models/address_dm.dart';
import '../../provider/address_provider.dart';
import '../../utils/basWidgets/animated_input_fields.dart';
import 'package:firebase_auth/firebase_auth.dart';

class AddressFormScreen extends StatefulWidget {
  final Address? addressToEdit;

  const AddressFormScreen({super.key, this.addressToEdit});

  @override
  State<AddressFormScreen> createState() => _AddressFormScreenState();
}

class _AddressFormScreenState extends State<AddressFormScreen> {
  final _formKey = GlobalKey<FormState>();
  late final TextEditingController _fullNameController;
  late final TextEditingController _addressLine1Controller;
  late final TextEditingController _addressLine2Controller;
  late final TextEditingController _cityController;
  late final TextEditingController _stateController;
  late final TextEditingController _postalCodeController;
  late final TextEditingController _countryController;
  late final TextEditingController _phoneNumberController;
  late bool _isDefault;
  bool _isSaving = false;

  bool get _isEditing => widget.addressToEdit != null;

  @override
  void initState() {
    super.initState();

    // Initialize controllers with existing values if editing
    _fullNameController =
        TextEditingController(text: widget.addressToEdit?.fullName ?? '');
    _addressLine1Controller =
        TextEditingController(text: widget.addressToEdit?.addressLine1 ?? '');
    _addressLine2Controller =
        TextEditingController(text: widget.addressToEdit?.addressLine2 ?? '');
    _cityController =
        TextEditingController(text: widget.addressToEdit?.city ?? '');
    _stateController =
        TextEditingController(text: widget.addressToEdit?.state ?? '');
    _postalCodeController =
        TextEditingController(text: widget.addressToEdit?.postalCode ?? '');
    _countryController =
        TextEditingController(text: widget.addressToEdit?.country ?? '');
    _phoneNumberController =
        TextEditingController(text: widget.addressToEdit?.phoneNumber ?? '');
    _isDefault = widget.addressToEdit?.isDefault ?? false;
  }

  @override
  void dispose() {
    _fullNameController.dispose();
    _addressLine1Controller.dispose();
    _addressLine2Controller.dispose();
    _cityController.dispose();
    _stateController.dispose();
    _postalCodeController.dispose();
    _countryController.dispose();
    _phoneNumberController.dispose();
    super.dispose();
  }

  void _saveAddress() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isSaving = true;
      });

      final userId = FirebaseAuth.instance.currentUser?.uid;
      if (userId == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text('You must be logged in to save addresses')),
        );
        setState(() {
          _isSaving = false;
        });
        return;
      }

      try {
        final AddressProvider addressProvider =
            Provider.of<AddressProvider>(context, listen: false);

        // Create address object
        final address = _isEditing
            ? widget.addressToEdit!.copyWith(
                fullName: _fullNameController.text,
                addressLine1: _addressLine1Controller.text,
                addressLine2: _addressLine2Controller.text.isEmpty
                    ? null
                    : _addressLine2Controller.text,
                city: _cityController.text,
                state: _stateController.text,
                postalCode: _postalCodeController.text,
                country: _countryController.text,
                phoneNumber: _phoneNumberController.text,
                isDefault: _isDefault,
              )
            : Address(
                id: '', // This will be generated by Firestore
                userId: userId,
                fullName: _fullNameController.text,
                addressLine1: _addressLine1Controller.text,
                addressLine2: _addressLine2Controller.text.isEmpty
                    ? null
                    : _addressLine2Controller.text,
                city: _cityController.text,
                state: _stateController.text,
                postalCode: _postalCodeController.text,
                country: _countryController.text,
                phoneNumber: _phoneNumberController.text,
                isDefault: _isDefault,
                createdAt: DateTime.now(),
                updatedAt: DateTime.now(),
              );

        if (_isEditing) {
          await addressProvider.updateAddress(userId, address);
        } else {
          await addressProvider.addAddress(userId, address);
        }

        if (!mounted) return;

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text(_isEditing
                  ? 'Address updated successfully'
                  : 'Address added successfully')),
        );

        // Navigate back to the previous screen
        Navigator.pop(context);
      } catch (e) {
        if (!mounted) return;

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: ${e.toString()}')),
        );

        setState(() {
          _isSaving = false;
        });
      }
    }
  }

  // Rest of your existing build methods...
  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;

    return Scaffold(
      appBar: AppBar(
        title: Text(_isEditing ? 'Edit Address' : 'Add New Address'),
        centerTitle: true,
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            // Form header
            _buildFormHeader(colorScheme),

            // Full Name
            AnimatedInputField(
              controller: _fullNameController,
              label: 'Full Name',
              prefixIcon: Icons.person_outline,
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter your full name';
                }
                return null;
              },
              textInputAction: TextInputAction.next,
              animationDelay: const Duration(milliseconds: 200),
            ),


            // Address Line 1
            AnimatedInputField(
              controller: _addressLine1Controller,
              label: 'Address Line 1',
              prefixIcon: Icons.home_outlined,
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter your address';
                }
                return null;
              },
              textInputAction: TextInputAction.next,
              animationDelay: const Duration(milliseconds: 300),
            ),

            // Address Line 2 (Optional)
            AnimatedInputField(
              controller: _addressLine2Controller,
              label: 'Address Line 2 (Optional)',
              prefixIcon: Icons.home_work_outlined,
              textInputAction: TextInputAction.next,
              animationDelay: const Duration(milliseconds: 400),
            ),

            // City
            AnimatedInputField(
              controller: _cityController,
              label: 'City',
              prefixIcon: Icons.location_city_outlined,
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter your city';
                }
                return null;
              },
              textInputAction: TextInputAction.next,
              animationDelay: const Duration(milliseconds: 500),
            ),

            // Two columns for State and Postal Code
            Row(
              children: [
                // State
                Expanded(
                  child: AnimatedInputField(
                    controller: _stateController,
                    label: 'State/Province',
                    prefixIcon: Icons.map_outlined,
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return 'Required';
                      }
                      return null;
                    },
                    textInputAction: TextInputAction.next,
                    animationDelay: const Duration(milliseconds: 600),
                  ),
                ),
                const SizedBox(width: 16),
                // Postal Code
                Expanded(
                  child: AnimatedInputField(
                    controller: _postalCodeController,
                    label: 'Postal Code',
                    prefixIcon: Icons.markunread_mailbox_outlined,
                    validator: (value) {
                      if (value == null || value.trim().isEmpty) {
                        return 'Required';
                      }
                      return null;
                    },
                    keyboardType: TextInputType.number,
                    textInputAction: TextInputAction.next,
                    inputFormatters: [
                      FilteringTextInputFormatter.digitsOnly,
                    ],
                    animationDelay: const Duration(milliseconds: 600),
                  ),
                ),
              ],
            ),

            // Country
            AnimatedInputField(
              controller: _countryController,
              label: 'Country',
              prefixIcon: Icons.public_outlined,
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter your country';
                }
                return null;
              },
              textInputAction: TextInputAction.next,
              animationDelay: const Duration(milliseconds: 700),
            ),

            // Phone Number
            AnimatedInputField(
              controller: _phoneNumberController,
              label: 'Phone Number',
              prefixIcon: Icons.phone_outlined,
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter your phone number';
                }
                if (!RegExp(r'^\+?[0-9]{10,15}$').hasMatch(value)) {
                  return 'Please enter a valid phone number';
                }
                return null;
              },
              keyboardType: TextInputType.phone,
              textInputAction: TextInputAction.done,
              inputFormatters: [
                FilteringTextInputFormatter.allow(RegExp(r'[0-9\+\-\(\) ]')),
              ],
              animationDelay: const Duration(milliseconds: 800),
            ),

            // Default Address Checkbox
            Container(
              margin: const EdgeInsets.symmetric(vertical: 16),
              child: CheckboxListTile(
                title: const Text('Set as default address'),
                value: _isDefault,
                onChanged: (value) {
                  setState(() {
                    _isDefault = value ?? false;
                  });
                },
                activeColor: colorScheme.primary,
                checkColor: colorScheme.onPrimary,
                contentPadding: EdgeInsets.zero,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            )
                .animate(delay: const Duration(milliseconds: 900))
                .fadeIn(duration: const Duration(milliseconds: 400)),

            const SizedBox(height: 24),

            // Save Button
            ElevatedButton.icon(
              onPressed: _isSaving ? null : _saveAddress,
              icon: _isSaving
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                      ),
                    )
                  : Icon(_isEditing
                      ? Icons.save_outlined
                      : Icons.add_location_alt_outlined),
              label: Text(_isEditing ? 'Update Address' : 'Save Address'),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            )
                .animate(delay: const Duration(milliseconds: 1000))
                .fadeIn(duration: const Duration(milliseconds: 400))
                .slideY(
                    begin: 0.2,
                    end: 0,
                    duration: const Duration(milliseconds: 400)),

            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }

  Widget _buildFormHeader(ColorScheme colorScheme) {
    // Your existing _buildFormHeader implementation...
    return Container(
      margin: const EdgeInsets.only(bottom: 24),
      child: Column(
        children: [
          Icon(
            _isEditing ? Icons.edit_location_alt : Icons.add_location_alt,
            size: 60,
            color: colorScheme.primary,
          ),
          const SizedBox(height: 16),
          Text(
            _isEditing ? 'Update Your Address' : 'Add a New Address',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: colorScheme.primary,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            _isEditing
                ? 'Make changes to your existing address'
                : 'Fill in the details for your new address',
            style: TextStyle(
              fontSize: 16,
              color: colorScheme.onSurfaceVariant,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    ).animate().fadeIn(duration: const Duration(milliseconds: 600)).slideY(
        begin: -0.1, end: 0, duration: const Duration(milliseconds: 500));
  }
}
